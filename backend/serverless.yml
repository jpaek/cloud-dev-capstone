service:
  name: serverless-cookbook-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  tracing:
    lambda: true
    apiGateway: true

  logs:
    restApi: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    USERS_TABLE: Users-${self:provider.stage}
    RECIPES_TABLE: Recipes-${self:provider.stage}
    RECIPE_ID_INDEX: RecipeIdIndex
    CONNECTIONS_TABLE: Connections-${self:provider.stage}
    ATTACHMENTS_S3_BUCKET: serverless-recipe-jaepaek-cloud-dev-udacity-attachments-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    THUMBNAILS_S3_BUCKET: serverless-recipe-thumbnail-${self:provider.stage}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetRecipes:
    handler: src/lambda/http/getRecipes.handler
    events:
      - http:
          method: get
          path: recipes
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}/index/${self:provider.environment.RECIPE_ID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}

  CreateRecipe:
    handler: src/lambda/http/createRecipe.handler
    events:
      - http:
          method: post
          path: recipes
          authorizer: Auth
          request:
            scehma:
              application/json: ${file(models/create-recipe-request.json)}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

  UpdateRecipe:
    handler: src/lambda/http/updateRecipe.handler
    events:
      - http:
          method: patch
          path: recipes/{recipeId}
          authorizer: Auth
          cors: true
          request:
            scehma:
              application/json: ${file(models/update-recipe-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Update*
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

  DeleteRecipe:
    handler: src/lambda/http/deleteRecipe.handler
    events:
      - http:
          method: delete
          path: recipes/{recipeId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Delete*
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: recipes/{recipeId}/attachment
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RecipeDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: recipeId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: recipeId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.RECIPES_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.RECIPE_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - 's3:GetObject'
                - 's3:PutObject'
                - 's3:DeleteObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    ThumbnailsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.THUMBNAILS_S3_BUCKET}